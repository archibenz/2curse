%===============================================================
% Лабораторная работа 5. Динамическое программирование
% Вариант 10 (методичка, табл. 5.6)
% Задача: найти минимальные затраты доставки груза из каждого
% пункта сети (1…9) в пункт 10 и вывести оптимальные маршруты.
%===============================================================

% ---------- 1. Исходные данные (тарифы ci_j для варианта 10) --
% Формат строки: [начало  конец  стоимость]
edgeData = [
  1  2   4;   % C12
  1  3   6;   % C13
  1  4   1;   % C14
  2  5   3;   % C25
  2  7   5;   % C27
  3  5   7;   % C35
  3  6   3;   % C36
  3  7   6;   % C37
  4  5   2;   % C45
  4  6   5;   % C46
  4  7   9;   % C47
  5  8   1;   % C58
  5  9   8;   % C59
  6  8   2;   % C68
  6  9   3;   % C69
  7  9   5;   % C79
  8 10   3;   % C8,10
  9 10   8    % C9,10
];

N   = 10;          % число пунктов
INF = Inf;         % «бесконечная» стоимость

% ---------- 2. Подготовка списков смежности -------------------
adj = cell(N,1);   % adj{i} = [j cij] — все дуги, выходящие из i
for k = 1:size(edgeData,1)
    i = edgeData(k,1);  j = edgeData(k,2);  c = edgeData(k,3);
    adj{i} = [adj{i}; j c];
end

% ---------- 3. ОБРАТНЫЙ ПРОГОН (вычисляем Fi) -----------------
F    = INF * ones(1, N);   % вектор размеров 1×N, заполненный бесконечностями
next = NaN(1,N);   % next(i) — оптимальный «следующий» пункт
F(10) = 0;         % базовое условие: затраты из 10 в 10 равны 0

for i = N-1:-1:1                       % движемся «от конца к началу»
    if !isempty(adj{i})
        next_nodes = adj{i}(:,1);
        edge_costs = adj{i}(:,2);
        if any(next_nodes > length(F))
            error("Некорректный индекс: next_nodes выходит за границы вектора F");
        endif
        f_values   = F(next_nodes);
        f_values   = f_values(:);             % ensure column vector
        costs      = edge_costs + f_values;   % Zi + F_{i+1}
        [F(i), idx] = min(costs);             % Fi = min(...)
        next(i)    = adj{i}(idx,1);           % запоминаем управление Ui*
    endif
endfor

% ---------- 4. ПРЯМОЙ ПРОГОН (восстанавливаем маршруты) -------
printf("  A -> B |        Оптимальный маршрут         | Затраты\n");
printf("-----------------------------------------------------------\n");

for start = 1:N-1
    if isinf(F(start))                     % недостижимый пункт
        printf(" %2d -> 10 |      — недостижимо —        |  —\n", start);
        continue;
    endif
    route = start;
    k = start;
    while k != 10
        k = next(k);
        route(end+1) = k;                  % строим цепочку
    endwhile
    % преобразуем маршрут в строку вида "1-4-5-8-10"
    routeStr = sprintf('%d-', route);
    routeStr = routeStr(1:end-1);          % убираем последний «-»
    printf(" %2d -> 10 | %-29s |  %2g\n", start, routeStr, F(start));
endfor

% ---------------------- конец программы -----------------------